From ae0abf931eaa1590568eb8b089fe43d7249800ab Mon Sep 17 00:00:00 2001
From: Marius Vollmer <mvollmer@redhat.com>
Date: Mon, 17 Jun 2013 13:55:15 +0300
Subject: [PATCH] Manage group membership.

---
 data/org.freedesktop.Accounts.User.xml |  54 +++++++
 src/libaccountsservice/act-user.c      |  75 +++++++++
 src/libaccountsservice/act-user.h      |   4 +
 src/user.c                             | 283 +++++++++++++++++++++++++--------
 4 files changed, 351 insertions(+), 65 deletions(-)

diff --git a/data/org.freedesktop.Accounts.User.xml b/data/org.freedesktop.Accounts.User.xml
index 88198d8..95604e1 100644
--- a/data/org.freedesktop.Accounts.User.xml
+++ b/data/org.freedesktop.Accounts.User.xml
@@ -406,6 +406,48 @@
     </doc:doc>
   </method>
 
+  <method name="ChangeGroups">
+    <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
+    <arg name="add" direction="in" type="as">
+      <doc:doc>
+        <doc:summary>
+          The groups to add.  It is an error if one of the groups does
+          not exist.
+        </doc:summary>
+      </doc:doc>
+    </arg>
+    <arg name="remove" direction="in" type="as">
+      <doc:doc>
+        <doc:summary>
+          The groups to remove.  It is not an error if the user is not
+          a member of one of the groups.  The primary group of a user
+          can not be removed.
+        </doc:summary>
+      </doc:doc>
+    </arg>
+    <doc:doc>
+      <doc:description>
+        <doc:para>
+          Changes the group membership of the user.  If a group is
+          listed both in 'add' and 'remove', then it will be added.
+        </doc:para>
+      </doc:description>
+      <doc:permission>
+        The caller needs one of the following PolicyKit authorizations:
+        <doc:list>
+          <doc:item>
+            <doc:term>org.freedesktop.accounts.user-administration</doc:term>
+            <doc:definition>To change group membership</doc:definition>
+          </doc:item>
+        </doc:list>
+      </doc:permission>
+      <doc:errors>
+        <doc:error name="org.freedesktop.Accounts.Error.PermissionDenied">if the caller lacks the appropriate PolicyKit authorization</doc:error>
+        <doc:error name="org.freedesktop.Accounts.Error.Failed">if the operation failed</doc:error>
+      </doc:errors>
+    </doc:doc>
+  </method>
+
   <method name="SetPasswordMode">
     <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
     <arg name="mode" direction="in" type="i">
@@ -583,6 +625,18 @@
     </doc:doc>
   </property>
 
+  <property name="Groups" type="as" access="read">
+    <annotation name="org.gtk.GDBus.C.ForceGVariant" value="true"/>
+    <doc:doc>
+      <doc:description>
+        <doc:para>
+          The users groups.  The first entry in the array is the
+          primary group, the rest are the supplementary groups.
+        </doc:para>
+      </doc:description>
+    </doc:doc>
+  </property>
+
   <property name="HomeDirectory" type="s" access="read">
     <doc:doc>
       <doc:description>
diff --git a/src/libaccountsservice/act-user.c b/src/libaccountsservice/act-user.c
index 9de689e..84d3a6f 100644
--- a/src/libaccountsservice/act-user.c
+++ b/src/libaccountsservice/act-user.c
@@ -77,6 +77,7 @@ enum {
         PROP_USER_NAME,
         PROP_REAL_NAME,
         PROP_ACCOUNT_TYPE,
+        PROP_GROUPS,
         PROP_PASSWORD_MODE,
         PROP_PASSWORD_HINT,
         PROP_HOME_DIR,
@@ -130,6 +131,7 @@ struct _ActUser {
         GVariant       *login_history;
 
         ActUserAccountType  account_type;
+        GVariant       *groups;
         ActUserPasswordMode password_mode;
 
         guint           uid_set : 1;
@@ -275,6 +277,9 @@ act_user_get_property (GObject    *object,
         case PROP_ACCOUNT_TYPE:
                 g_value_set_int (value, user->account_type);
                 break;
+        case PROP_GROUPS:
+                g_value_set_variant (value, user->groups);
+                break;
         case PROP_PASSWORD_MODE:
                 g_value_set_int (value, user->password_mode);
                 break;
@@ -364,6 +369,14 @@ act_user_class_init (ActUserClass *class)
                                                            ACT_USER_ACCOUNT_TYPE_STANDARD,
                                                            G_PARAM_READABLE));
         g_object_class_install_property (gobject_class,
+                                         PROP_GROUPS,
+                                         g_param_spec_variant ("groups",
+                                                               "Groups",
+                                                               "The groups of this user.",
+                                                               G_VARIANT_TYPE ("as"),
+                                                               NULL,
+                                                               G_PARAM_READABLE));
+        g_object_class_install_property (gobject_class,
                                          PROP_PASSWORD_MODE,
                                          g_param_spec_int ("password-mode",
                                                            "Password Mode",
@@ -671,6 +684,24 @@ act_user_get_account_type (ActUser *user)
 }
 
 /**
+ * act_user_get_groups:
+ * @user: the user object to examine.
+ *
+ * Retrieves the groups that @user is a member of, as a list of
+ * strings.  The users primary groups is always the first element in
+ * the list, the rest are the supplementary groups.
+ *
+ * Returns: a #GVariant of type "as".
+ **/
+GVariant *
+act_user_get_groups (ActUser *user)
+{
+        g_return_val_if_fail (ACT_IS_USER (user), ACT_USER_ACCOUNT_TYPE_STANDARD);
+
+        return user->groups;
+}
+
+/**
  * act_user_get_password_mode:
  * @user: the user object to examine.
  *
@@ -1151,6 +1182,16 @@ collect_props (const gchar *key,
                         user->account_type = (ActUserAccountType) new_account_type;
                         g_object_notify (G_OBJECT (user), "account-type");
                 }
+        } else if (strcmp (key, "Groups") == 0) {
+                GVariant *new_groups;
+
+                new_groups = value;
+                if (user->groups == NULL || !g_variant_equal (user->groups, new_groups)) {
+                        if (user->groups)
+                                g_variant_unref (user->groups);
+                        user->groups = g_variant_ref (new_groups);
+                        g_object_notify (G_OBJECT (user), "groups");
+                }
         } else if (strcmp (key, "PasswordMode") == 0) {
                 int new_password_mode;
 
@@ -1808,6 +1849,40 @@ act_user_set_account_type (ActUser            *user,
         }
 }
 
+/**
+ * act_user_change_groups:
+ * @user: the user object to alter.
+ * @add: the groups to add.
+ * @remove: the groups to remove.
+ *
+ * Changes the group membership of @user.
+ *
+ * The primary group of the user can not be removed.  If a group is
+ * listed both in @add and @remove, it will be added.
+ *
+ * Note this function is synchronous and ignores errors.
+ **/
+void
+act_user_change_groups (ActUser            *user,
+                        const char *const  *add,
+                        const char *const  *remove)
+{
+        GError *error = NULL;
+
+        g_return_if_fail (ACT_IS_USER (user));
+        g_return_if_fail (ACCOUNTS_IS_USER (user->accounts_proxy));
+
+        if (!accounts_user_call_change_groups_sync (user->accounts_proxy,
+                                                    add,
+                                                    remove,
+                                                    NULL,
+                                                    &error)) {
+                g_warning ("ChangeGroups call failed: %s", error->message);
+                g_error_free (error);
+                return;
+        }
+}
+
 static gchar
 salt_char (GRand *rand)
 {
diff --git a/src/libaccountsservice/act-user.h b/src/libaccountsservice/act-user.h
index d188db4..ade2c7f 100644
--- a/src/libaccountsservice/act-user.h
+++ b/src/libaccountsservice/act-user.h
@@ -57,6 +57,7 @@ uid_t          act_user_get_uid                   (ActUser   *user);
 const char    *act_user_get_user_name             (ActUser   *user);
 const char    *act_user_get_real_name             (ActUser   *user);
 ActUserAccountType act_user_get_account_type      (ActUser   *user);
+GVariant      *act_user_get_groups                (ActUser   *user);
 ActUserPasswordMode act_user_get_password_mode    (ActUser   *user);
 const char    *act_user_get_password_hint         (ActUser   *user);
 const char    *act_user_get_home_dir              (ActUser   *user);
@@ -100,6 +101,9 @@ void           act_user_set_icon_file             (ActUser    *user,
                                                    const char *icon_file);
 void           act_user_set_account_type          (ActUser    *user,
                                                    ActUserAccountType account_type);
+void           act_user_change_groups             (ActUser    *user,
+                                                   const char *const *add,
+                                                   const char *const *remove);
 void           act_user_set_password              (ActUser     *user,
                                                    const gchar *password,
                                                    const gchar *hint);
diff --git a/src/user.c b/src/user.c
index 1698eeb..d0af14c 100644
--- a/src/user.c
+++ b/src/user.c
@@ -54,6 +54,7 @@ enum {
         PROP_USER_NAME,
         PROP_REAL_NAME,
         PROP_ACCOUNT_TYPE,
+        PROP_GROUPS,
         PROP_HOME_DIR,
         PROP_SHELL,
         PROP_EMAIL,
@@ -87,6 +88,7 @@ struct User {
         gchar        *user_name;
         gchar        *real_name;
         AccountType   account_type;
+        GVariant     *groups;
         PasswordMode  password_mode;
         gchar        *password_hint;
         gchar        *home_dir;
@@ -118,39 +120,53 @@ static void user_accounts_user_iface_init (AccountsUserIface *iface);
 
 G_DEFINE_TYPE_WITH_CODE (User, user, ACCOUNTS_TYPE_USER_SKELETON, G_IMPLEMENT_INTERFACE (ACCOUNTS_TYPE_USER, user_accounts_user_iface_init));
 
-static gint
-account_type_from_pwent (struct passwd *pwent)
+static void
+groups_and_account_type_from_pwent (struct passwd *pwent,
+                                    GVariant **groups_out,
+                                    AccountType *account_type_out)
 {
-        struct group *grp;
         gid_t wheel;
+        gboolean have_wheel;
         gid_t *groups;
         gint ngroups;
+        struct group *grp;
         gint i;
+        GVariantBuilder result;
 
         if (pwent->pw_uid == 0) {
                 g_debug ("user is root so account type is administrator");
-                return ACCOUNT_TYPE_ADMINISTRATOR;
+                *account_type_out = ACCOUNT_TYPE_ADMINISTRATOR;
+        } else {
+                *account_type_out = ACCOUNT_TYPE_STANDARD;
         }
 
         grp = getgrnam (ADMIN_GROUP);
         if (grp == NULL) {
                 g_debug (ADMIN_GROUP " group not found");
-                return ACCOUNT_TYPE_STANDARD;
+                have_wheel = FALSE;
+        } else {
+                wheel = grp->gr_gid;
+                have_wheel = TRUE;
         }
-        wheel = grp->gr_gid;
 
         ngroups = get_user_groups (pwent->pw_name, pwent->pw_gid, &groups);
 
+        g_variant_builder_init (&result, G_VARIANT_TYPE("as"));
+        grp = getgrgid (pwent->pw_gid);
+        if (grp)
+                g_variant_builder_add (&result, "s", grp->gr_name);
         for (i = 0; i < ngroups; i++) {
-                if (groups[i] == wheel) {
-                        g_free (groups);
-                        return ACCOUNT_TYPE_ADMINISTRATOR;
+                if (have_wheel && groups[i] == wheel)
+                        *account_type_out = ACCOUNT_TYPE_ADMINISTRATOR;
+                if (groups[i] != pwent->pw_gid) {
+                        grp = getgrgid (groups[i]);
+                        if (grp)
+                                g_variant_builder_add (&result, "s", grp->gr_name);
                 }
         }
 
         g_free (groups);
-
-        return ACCOUNT_TYPE_STANDARD;
+        *groups_out = g_variant_builder_end (&result);
 }
 
 void
@@ -166,6 +182,7 @@ user_update_from_pwent (User          *user,
         gboolean locked;
         PasswordMode mode;
         AccountType account_type;
+        GVariant *groups;
 
         g_object_freeze_notify (G_OBJECT (user));
 
@@ -224,13 +241,25 @@ user_update_from_pwent (User          *user,
         /* GID */
         user->gid = pwent->pw_gid;
 
-        account_type = account_type_from_pwent (pwent);
+        groups_and_account_type_from_pwent (pwent,
+                                            &groups,
+                                            &account_type);
+
         if (account_type != user->account_type) {
                 user->account_type = account_type;
                 changed = TRUE;
                 g_object_notify (G_OBJECT (user), "account-type");
         }
 
+        if (user->groups == NULL || !g_variant_equal (groups, user->groups)) {
+                if (user->groups)
+                        g_variant_unref (user->groups);
+                user->groups = g_variant_ref (groups);
+                changed = TRUE;
+                g_object_notify (G_OBJECT (user), "groups");
+        } else
+                g_variant_unref (groups);
+
         /* Username */
         if (g_strcmp0 (user->user_name, pwent->pw_name) != 0) {
                 g_free (user->user_name);
@@ -1614,77 +1643,134 @@ user_set_locked (AccountsUser          *auser,
         return TRUE;
 }
 
-static void
-user_change_account_type_authorized_cb (Daemon                *daemon,
-                                        User                  *user,
-                                        GDBusMethodInvocation *context,
-                                        gpointer               data)
-
+static gboolean
+user_change_groups_internal (Daemon                *daemon,
+                             User                  *user,
+                             GDBusMethodInvocation *context,
+                             const char *const     *add,
+                             const char *const     *remove)
 {
-        AccountType account_type = GPOINTER_TO_INT (data);
         GError *error;
+        int i, j, ngroups;
         gid_t *groups;
-        gint ngroups;
         GString *str;
-        gid_t wheel;
-        struct group *grp;
-        gint i;
+        AccountType account_type;
+        GVariantBuilder groups_builder;
+        GVariant *groups_variant;
+        struct group *gr;
         const gchar *argv[6];
 
-        if (user->account_type != account_type) {
-                sys_log (context,
-                         "change account type of user '%s' (%d) to %d",
-                         user->user_name, user->uid, account_type);
+        g_variant_builder_init (&groups_builder, G_VARIANT_TYPE("as"));
 
-                grp = getgrnam (ADMIN_GROUP);
-                if (grp == NULL) {
-                        throw_error (context, ERROR_FAILED, "failed to set account type: wheel group not found");
-                        return;
-                }
-                wheel = grp->gr_gid;
+        gr = getgrgid (user->gid);
+        if (gr)
+                g_variant_builder_add (&groups_builder, "s", gr->gr_name);
 
-                ngroups = get_user_groups (user->user_name, user->gid, &groups);
+        ngroups = get_user_groups (user->user_name, user->gid, &groups);
 
-                str = g_string_new ("");
-                for (i = 0; i < ngroups; i++) {
-                        if (groups[i] == wheel)
-                                continue;
-                        g_string_append_printf (str, "%d,", groups[i]);
-                }
-                switch (account_type) {
-                case ACCOUNT_TYPE_ADMINISTRATOR:
-                        g_string_append_printf (str, "%d", wheel);
-                        break;
-                case ACCOUNT_TYPE_STANDARD:
-                default:
-                        /* remove excess comma */
-                        g_string_truncate (str, str->len - 1);
-                        break;
-                }
+        if (user->uid == 0)
+                account_type = ACCOUNT_TYPE_ADMINISTRATOR;
+        else
+                account_type = ACCOUNT_TYPE_STANDARD;
 
-                g_free (groups);
+        str = g_string_new ("");
+        for (i = 0; i < ngroups; i++) {
+                if (groups[i] == user->gid)
+                        continue;
 
-                argv[0] = "/usr/sbin/usermod";
-                argv[1] = "-G";
-                argv[2] = str->str;
-                argv[3] = "--";
-                argv[4] = user->user_name;
-                argv[5] = NULL;
+                gr = getgrgid (groups[i]);
+                if (gr == NULL)
+                        continue;
 
-                g_string_free (str, FALSE);
+                for (j = 0; remove[j]; j++)
+                        if (strcmp (gr->gr_name, remove[j]) == 0)
+                                break;
+                if (remove[j])
+                        continue;
 
-                error = NULL;
-                if (!spawn_with_login_uid (context, argv, &error)) {
-                        throw_error (context, ERROR_FAILED, "running '%s' failed: %s", argv[0], error->message);
-                        g_error_free (error);
-                        return;
-                }
+                if (strcmp (gr->gr_name, ADMIN_GROUP) == 0)
+                        account_type = ACCOUNT_TYPE_ADMINISTRATOR;
+
+                g_string_append_printf (str, "%s,", gr->gr_name);
+                g_variant_builder_add (&groups_builder, "s", gr->gr_name);
+        }
+        for (j = 0; add[j]; j++) {
+                if (strcmp (add[j], ADMIN_GROUP) == 0)
+                        account_type = ACCOUNT_TYPE_ADMINISTRATOR;
+
+                g_string_append_printf (str, "%s,", add[j]);
+                g_variant_builder_add (&groups_builder, "s", add[j]);
+        }
+
+        /* remove excess comma */
+        g_string_truncate (str, str->len - 1);
+
+        g_free (groups);
+
+        argv[0] = "/usr/sbin/usermod";
+        argv[1] = "-G";
+        argv[2] = str->str;
+        argv[3] = "--";
+        argv[4] = user->user_name;
+        argv[5] = NULL;
+
+        error = NULL;
+        if (!spawn_with_login_uid (context, argv, &error)) {
+                throw_error (context, ERROR_FAILED, "running '%s' failed: %s", argv[0], error->message);
+                g_error_free (error);
+                g_string_free (str, TRUE);
+                return FALSE;
+        }
 
+        g_string_free (str, TRUE);
+
+        if (user->account_type != account_type) {
                 user->account_type = account_type;
+                accounts_user_emit_changed (ACCOUNTS_USER (user));
+                g_object_notify (G_OBJECT (user), "account-type");
+        }
 
+        groups_variant = g_variant_builder_end (&groups_builder);
+        if (user->groups == NULL || !g_variant_equal (user->groups, groups_variant)) {
+                if (user->groups)
+                        g_variant_unref (user->groups);
+                user->groups = g_variant_ref (groups_variant);
                 accounts_user_emit_changed (ACCOUNTS_USER (user));
+                g_object_notify (G_OBJECT (user), "groups");
+        } else
+                g_variant_unref (groups_variant);
 
-                g_object_notify (G_OBJECT (user), "account-type");
+        return TRUE;
+}
+
+static void
+user_change_account_type_authorized_cb (Daemon                *daemon,
+                                        User                  *user,
+                                        GDBusMethodInvocation *context,
+                                        gpointer               data)
+
+{
+        AccountType account_type = GPOINTER_TO_INT (data);
+
+        if (user->account_type != account_type) {
+                const char *admin_groups[] = { ADMIN_GROUP, NULL };
+                const char *no_groups[] = { NULL };
+                const char **add, **remove;
+
+                sys_log (context,
+                         "change account type of user '%s' (%d) to %d",
+                         user->user_name, user->uid, account_type);
+
+                if (account_type == ACCOUNT_TYPE_ADMINISTRATOR) {
+                        add = admin_groups;
+                        remove = no_groups;
+                } else {
+                        add = no_groups;
+                        remove = admin_groups;
+                }
+
+                if (!user_change_groups_internal (daemon, user, context, add, remove))
+                        return;
         }
 
         accounts_user_complete_set_account_type (ACCOUNTS_USER (user), context);
@@ -1714,6 +1800,51 @@ user_set_account_type (AccountsUser          *auser,
 }
 
 static void
+user_change_groups_authorized_cb (Daemon                *daemon,
+                                  User                  *user,
+                                  GDBusMethodInvocation *context,
+                                  gpointer               data)
+{
+        GVariant *params = g_dbus_method_invocation_get_parameters (context);
+        const char **add = NULL, **remove = NULL;
+        int i;
+
+        g_variant_get (params, "(^a&s^a&s)", &add, &remove);
+
+        sys_log (context, "changing groups of '%s'", user->user_name);
+        for (i = 0; add[i]; i++)
+                sys_log (context, "+%s", add[i]);
+        for (i = 0; remove[i]; i++)
+                sys_log (context, "-%s", remove[i]);
+
+        if (user_change_groups_internal (daemon, user, context, add, remove))
+                accounts_user_complete_change_groups (ACCOUNTS_USER (user), context);
+
+        g_free (add);
+        g_free (remove);
+}
+
+static gboolean
+user_change_groups (AccountsUser          *auser,
+                    GDBusMethodInvocation *context,
+                    const gchar *const    *add,
+                    const gchar *const    *remove)
+{
+        User *user = (User*)auser;
+
+        daemon_local_check_auth (user->daemon,
+                                 user,
+                                 "org.freedesktop.accounts.user-administration",
+                                 TRUE,
+                                 user_change_groups_authorized_cb,
+                                 context,
+                                 NULL,
+                                 NULL);
+
+        return TRUE;
+}
+
+static void
 user_change_password_mode_authorized_cb (Daemon                *daemon,
                                          User                  *user,
                                          GDBusMethodInvocation *context,
@@ -1995,6 +2126,12 @@ user_real_get_account_type (AccountsUser *user)
         return (gint) USER (user)->account_type;
 }
 
+static GVariant *
+user_real_get_groups (AccountsUser *user)
+{
+        return USER (user)->groups;
+}
+
 static const gchar *
 user_real_get_home_directory (AccountsUser *user)
 {
@@ -2113,6 +2250,9 @@ user_finalize (GObject *object)
 	if (user->login_history)
 		g_variant_unref (user->login_history);
 
+        if (user->groups)
+                g_variant_unref (user->groups);
+
         if (G_OBJECT_CLASS (user_parent_class)->finalize)
                 (*G_OBJECT_CLASS (user_parent_class)->finalize) (object);
 }
@@ -2129,6 +2269,13 @@ user_set_property (GObject      *object,
         case PROP_ACCOUNT_TYPE:
                 user->account_type = g_value_get_int (value);
                 break;
+        case PROP_GROUPS: {
+                GVariant *new_groups = g_variant_ref (g_value_get_variant (value));
+                if (user->groups)
+                        g_variant_unref (user->groups);
+                user->groups = new_groups;
+                break;
+        }
         case PROP_LANGUAGE:
                 user->language = g_value_dup_string (value);
                 break;
@@ -2182,6 +2329,9 @@ user_get_property (GObject    *object,
         case PROP_ACCOUNT_TYPE:
                 g_value_set_int (value, user->account_type);
                 break;
+        case PROP_GROUPS:
+                g_value_set_variant (value, user->groups);
+                break;
         case PROP_PASSWORD_MODE:
                 g_value_set_int (value, user->password_mode);
                 break;
@@ -2261,6 +2411,7 @@ static void
 user_accounts_user_iface_init (AccountsUserIface *iface)
 {
         iface->handle_set_account_type = user_set_account_type;
+        iface->handle_change_groups = user_change_groups;
         iface->handle_set_automatic_login = user_set_automatic_login;
         iface->handle_set_email = user_set_email;
         iface->handle_set_home_directory = user_set_home_directory;
@@ -2278,6 +2429,7 @@ user_accounts_user_iface_init (AccountsUserIface *iface)
         iface->get_user_name = user_real_get_user_name;
         iface->get_real_name = user_real_get_real_name;
         iface->get_account_type = user_real_get_account_type;
+        iface->get_groups = user_real_get_groups;
         iface->get_home_directory = user_real_get_home_directory;
         iface->get_shell = user_real_get_shell;
         iface->get_email = user_real_get_email;
@@ -2303,6 +2455,7 @@ user_init (User *user)
         user->user_name = NULL;
         user->real_name = NULL;
         user->account_type = ACCOUNT_TYPE_STANDARD;
+        user->groups = NULL;
         user->home_dir = NULL;
         user->shell = NULL;
         user->icon_file = NULL;
-- 
1.8.3.1

